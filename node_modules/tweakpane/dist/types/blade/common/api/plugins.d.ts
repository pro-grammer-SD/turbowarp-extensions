import { BindingTarget } from '../../../common/binding/target';
import { View } from '../../../common/view/view';
import { InputBindingPlugin } from '../../../input-binding/plugin';
import { MonitorBindingPlugin } from '../../../monitor-binding/plugin';
import { BasePlugin } from '../../../plugin';
import { InputBindingController } from '../../input-binding/controller/input-binding';
import { MonitorBindingController } from '../../monitor-binding/controller/monitor-binding';
import { BladePlugin } from '../../plugin';
import { BladeController } from '../controller/blade';
import { BladeApi } from './blade';
import { InputParams, MonitorParams } from './params';
export declare const Plugins: {
    blades: BladePlugin<any>[];
    inputs: InputBindingPlugin<any, any, any>[];
    monitors: MonitorBindingPlugin<any, any>[];
};
export declare function getAllPlugins(): BasePlugin[];
/**
 * @hidden
 */
export declare function createInput(document: Document, target: BindingTarget, params: InputParams): InputBindingController<unknown>;
/**
 * @hidden
 */
export declare function createMonitor(document: Document, target: BindingTarget, params: MonitorParams): MonitorBindingController<unknown>;
export declare function createBlade(document: Document, params: Record<string, unknown>): BladeController<View>;
export declare function createBladeApi(bc: BladeController<View>): BladeApi<BladeController<View>>;
